-- ============================================================
--   SCRIPT HEADER (DATABASE STRUCTURE)
--   Template-RMA_16.1 And Onwards DDS
--   DA Module Name: DDS
-- ============================================================= 
DECLARE
isRmdb NUMBER;
iExists NUMBER;
BEGIN
SELECT count(*) INTO isRmdb FROM user_tables WHERE table_name='SYS_PARMS';
IF isRmdb > 0 THEN
dbms_output.put_line('Error: Script Execution Aborted - Script trying to execute on RISKMASTER database not on DA Staging database. Please open the correct Staging database and execute this script.');
ELSE
BEGIN
--==========================================================
---CREATE DDS_USR_DEF_RSV_MAP table 
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_USR_DEF_RSV_MAP';

--IF iExists != 0 THEN
--EXECUTE IMMEDIATE
--'DROP TABLE DDS_USR_DEF_RSV_MAP';
--iExists := 0 ;
--END IF;

IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'CREATE TABLE DDS_USR_DEF_RSV_MAP(
  OPTIONSET_ID number,
  CONFIG_ID number NOT NULL,
  USERID number NOT NULL,
  LOB_CODE number NOT NULL,
  BUCKET varchar2(2) NOT NULL,
  RSV_TYPE_SHORT_CODE varchar2(25) ,
  RSV_TYPE_CODE number,
  CODE_DESC varchar2(50)
)';

--Note: The user ID and job ID of it will be passed in XML String which will be taken in last to execute the data from this table

EXECUTE IMMEDIATE 'ALTER TABLE DDS_USR_DEF_RSV_MAP ADD CONSTRAINT DDS_USR_DEF_RSV_MAP_PK PRIMARY KEY (USERID, CONFIG_ID, LOB_CODE, BUCKET)';

END IF;
END;


--==========================================================
---CREATE DDS_ERROR_LOG table 
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_ERROR_LOG';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE DDS_ERROR_LOG';
iExists := 0 ;
END IF;

IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'CREATE TABLE DDS_ERROR_LOG(  ERR_LOG_ROW_ID NUMBER NOT NULL, 
  JOBID NUMBER NOT NULL, 
  DA_ROW_ID NUMBER, -- It is a da row id of table in which we have inserted the data
  MODULE_NAME VARCHAR2(50), 
  ERROR_TABLE_TO_CHECK VARCHAR2(100),
  CALLING_ERROR_LOCATION CLOB, 
  CURRENT_ERROR_LOCATION CLOB, 
  ERROR_PROC_NAME CLOB,
  ERROR_TIME VARCHAR2(14),   ---NEHA
  ERROR_DESC CLOB, 
  IS_VALIDATION NUMBER, 
  ERROR_COLUMNS CLOB,
  ERROR_KEY_COLUMN VARCHAR2(50),
  ERROR_KEY_COLUMN_VALUE VARCHAR2(50)
   )
';

 EXECUTE IMMEDIATE 'CREATE INDEX DDS_ERRORLOG_IDX ON DDS_ERROR_LOG(JOBID,DA_ROW_ID,ERROR_TABLE_TO_CHECK,IS_VALIDATION)';

END IF;
END;


--==========================================================
---CREATE DDS_PROCESS_LOG_T table 
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_PROCESS_LOG_T';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE DDS_PROCESS_LOG_T';
iExists := 0 ;
END IF;

IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'CREATE TABLE DDS_PROCESS_LOG_T(
    JOBID NUMBER NOT NULL,
    PROCESS_DESC  varchar2(4000),
    MODULE_NAME VARCHAR2(50),
    TABLE_NAME VARCHAR2(50),
                DISPLAY_ORDER NUMBER    
   )  
';

END IF;
END;



--==========================================================
---CREATE DDS_ERROR_LOG_SEQ SEQUENCE 
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='SEQUENCE' AND OBJECT_NAME='DDS_ERROR_LOG_SEQ';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP SEQUENCE DDS_ERROR_LOG_SEQ';
iExists := 0 ;
END IF;

IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'CREATE SEQUENCE DDS_ERROR_LOG_SEQ INCREMENT BY 1 START WITH 1 MINVALUE 1
';

END IF;
END;

--==========================================================
---CREATE DDS_JOB_CONFIG_OPTIONS table 
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_JOB_CONFIG_OPTIONS';

--IF iExists != 0 THEN
--EXECUTE IMMEDIATE
--'DROP TABLE DDS_JOB_CONFIG_OPTIONS';
--iExists := 0 ;
--END IF;

IF iExists = 0 THEN
 EXECUTE IMMEDIATE 'Create table DDS_JOB_CONFIG_OPTIONS (
CONFIG_ID number,
CONFIG_NAME VARCHAR2(255),
USERID number,
XML_STRING CLOB,
IS_DELETED number
)';
--EXECUTE IMMEDIATE 'ALTER TABLE DDS_JOB_CONFIG_OPTIONS ADD CONSTRAINT PK_DDS_JOB_CONFIG_OPTIONS PRIMARY KEY (CONFIG_ID)';
 --Note: The user ID and job ID of it will be passed in XML String which will be taken in last to execute the data from this table

END IF;
END;

--==========================================================
---CREATE DDS_CLAIM table 
--==========================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_CLAIM';
IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE DDS_CLAIM';
iExists := 0 ;
END IF;
END;
IF iExists = 0 THEN

EXECUTE IMMEDIATE 'CREATE TABLE DDS_CLAIM(
  DA_ROW_ID NUMBER NOT NULL,
  JOBID NUMBER NOT NULL,
  INVALID_ROW NUMBER,
  RECORD_TYPE VARCHAR2(1),
  CLAIM_NUMBER VARCHAR2(25),
  CLAIM_SUFFIX NUMBER,
  CLAIM_TYPE VARCHAR2(25),
  DIVISION VARCHAR2(25),
  LOCATION VARCHAR2(25),
  DEPARTMENT VARCHAR2(25),
  COMPANY VARCHAR2(25),
  COUNTRY VARCHAR2(20),
  DIVISION_DESC VARCHAR2(255),  
  LOCATION_DESC VARCHAR2(255),
  DEPARTMENT_DESC VARCHAR2(255),
  COMPANY_DESC VARCHAR2(255),
  TIME_OF_CLAIM VARCHAR2(6),
  DATE_OF_LOSS VARCHAR2(8),
  DATE_REPORTED VARCHAR2(8),
  DATE_OF_CLAIM VARCHAR2(8),
  DATE_CLOSED VARCHAR2(14),
  DATE_REOPENED VARCHAR2(8),
  CLAIM_STATUS VARCHAR2(25),
  RESERVE_A_OPENING FLOAT,
  RESERVE_A_CURRENT FLOAT,
  RESERVE_A_DATE VARCHAR2(8),
  PAID_A_TOTAL FLOAT,
  COLLECTION_A_TOTAL FLOAT,
  RESERVE_B_OPENING FLOAT,
  RESERVE_B_CURRENT FLOAT,
  RESERVE_B_DATE VARCHAR2(8),
  PAID_B_TOTAL FLOAT,
  COLLECTION_B_TOTAL FLOAT,
  RESERVE_C_OPENING FLOAT,
  RESERVE_C_CURRENT FLOAT,
  RESERVE_C_DATE VARCHAR2(8),
  PAID_C_TOTAL FLOAT,
  COLLECTION_C_TOTAL FLOAT,
  RESERVE_D_OPENING FLOAT,
  RESERVE_D_CURRENT FLOAT,
  RESERVE_D_DATE VARCHAR2(8),
  PAID_D_TOTAL FLOAT,
  COLLECTION_D_TOTAL FLOAT,
  CAUSE_CODE VARCHAR2(25),
  CLAIMANT_LASTNAME VARCHAR2(255),
  CLAIMANT_FIRSTNAME VARCHAR2(255),
  CLAIMANT_SSN VARCHAR2(20),
  CLAIMANT_ADDRESS1 VARCHAR2(100),
  CLAIMANT_ADDRESS2 VARCHAR2(100),
  CLAIMANT_CITY VARCHAR2(50),
  CLAIMANT_STATE VARCHAR2(4),
  CLAIMANT_ZIP VARCHAR2(10),
  CLAIMANT_SEX VARCHAR2(25),
  CLAIMANT_BIRTH_DT VARCHAR2(8),
  CLAIMANT_PHONE VARCHAR2(30),
  CLAIMANT_COMMENT CLOB,
  DEF_LASTNAME VARCHAR2(255),
  DEF_FIRSTNAME VARCHAR2(255),
  DEF_ADDRESS VARCHAR2(100),
  DEF_CITY VARCHAR2(50),
  DEF_STATE VARCHAR2(4),
  DEF_ZIP VARCHAR2(10),
  DEF_PHONE VARCHAR2(30),
  DEF_COMMENT CLOB,
  CLOSURE_METHOD VARCHAR2 (25),
  DESCRIPTION CLOB,
  SERVICE VARCHAR2 (25),
  ICD10_1 VARCHAR2(25),--asharma590 jira 74846
  ICD10_2 VARCHAR2(25),
  ICD10_3 VARCHAR2(25),
  ICD10_4 VARCHAR2(25),
  ICD10_5 VARCHAR2(25),
  DIAGNOSIS_1 VARCHAR2(25),
  DIAGNOSIS_2 VARCHAR2(25),
  DIAGNOSIS_3 VARCHAR2(25),
  DIAGNOSIS_4 VARCHAR2(25),
  DIAGNOSIS_5 VARCHAR2(25),
  POLICY_NUMBER VARCHAR2 (40),
  POLICY_EFFECT_DATE VARCHAR2 (8),
  POLICY_EXPIRE_DATE VARCHAR2 (8),
  SUIT_DATE VARCHAR2 (8),
  CASE_NUMBER VARCHAR2 (22),
  EVENT_NUMBER VARCHAR2 (25),
  COMMENTS CLOB,
  ILLNESS_CODE VARCHAR2 (25),
  INJURY_CODE_1 VARCHAR2 (25),
  INJURY_CODE_2 VARCHAR2 (25),
  INJURY_CODE_3 VARCHAR2 (25),
  INJURY_CODE_4 VARCHAR2 (25),
  INJURY_CODE_5 VARCHAR2 (25),
  BODY_PART_1 VARCHAR2 (25),
  BODY_PART_2 VARCHAR2 (25),
  BODY_PART_3 VARCHAR2 (25),
  BODY_PART_4 VARCHAR2 (25),
  BODY_PART_5 VARCHAR2 (25),
  EMP_DEPARTMENT VARCHAR2 (25),
  OCCUPATION VARCHAR2 (25),
  DATE_OF_BIRTH VARCHAR2 (8),
  DATE_OF_HIRE VARCHAR2 (8),
  DATE_OF_DEATH VARCHAR2 (8),
  OSHA_RECORDABLE VARCHAR2 (8),
  EMPLOYEE_SEX VARCHAR2 (8),
  WEEKLY_WAGE_RATE FLOAT,
  HOURLY_WAGE_RATE FLOAT,
  WEEKLY_HOURS FLOAT,
  NCCI_CLASS_CODE VARCHAR2 (25),
  ACCIDENT_STATE VARCHAR2 (4),
  MARITAL_STATUS VARCHAR2 (25),
  DEPENDENT_LNAME VARCHAR2 (255),
  DEPENDENT_FNAME VARCHAR2 (255),
  DEPENDENT_BIRTH_DT VARCHAR2 (8),
  LICENSE_NUMBER VARCHAR2 (22),
  LICENSE_EXPIR_DATE VARCHAR2 (8),
  LICENSE_TYPE VARCHAR2 (22),
  LICENSE_RESTRICT VARCHAR2 (25),
  RETURN_WORK_DATE VARCHAR2 (8),
  ACTIVE_FLAG VARCHAR2 (1),
  EMPLOYER_SIC_CODE VARCHAR2 (25),
  EMPLOYER_PAYROLL_CLASS_CODE VARCHAR2 (25),
  VEHICLE_ID VARCHAR2 (20),
  VEHICLE_YEAR VARCHAR2 (4),
  VEHICLE_MAKE VARCHAR2 (20),
  EMPLOYEE_ID VARCHAR2 (20),
  VEHICLE_MODEL VARCHAR2 (50),
  FILE_NUMBER VARCHAR2 (32),
  DATE_LAST_WORKED VARCHAR2 (8),
  CLAIMANT_MIDDLENAME VARCHAR2 (255),
  ACCIDENT_DESC VARCHAR2 (25),
  ACCIDENT_PREVENTABLE VARCHAR2 (1),
  USER_FIELD_A CLOB,
  USER_FIELD_B VARCHAR2 (255),
  USER_FIELD_C VARCHAR2 (255),
  USER_FIELD_D VARCHAR2 (255),
  USER_FIELD_E VARCHAR2 (255),
  USER_FIELD_F VARCHAR2 (255),
  USER_FIELD_G VARCHAR2 (255),
  USER_FIELD_H VARCHAR2 (255),
  USER_FIELD_I VARCHAR2 (255),
  USER_FIELD_J VARCHAR2 (255),
  USER_FIELD_K VARCHAR2 (255),
  USER_FIELD_L VARCHAR2 (255),
  USER_FIELD_M VARCHAR2 (255),
  USER_FIELD_N VARCHAR2 (255),
  USER_FIELD_O VARCHAR2 (255),
  USER_FIELD_P VARCHAR2 (255),
  USER_FIELD_Q VARCHAR2 (255),
  USER_FIELD_R VARCHAR2 (255),
  USER_FIELD_S VARCHAR2 (255),
  USER_FIELD_T VARCHAR2 (255),
  USER_FIELD_U VARCHAR2 (255),
  USER_FIELD_V VARCHAR2 (255),
  USER_FIELD_W VARCHAR2 (255),
  USER_FIELD_X VARCHAR2 (255),
  USER_FIELD_Y VARCHAR2 (255),
  USER_FIELD_Z VARCHAR2 (255),
  PLAN_NAME VARCHAR2 (20),
  CLASS_NAME VARCHAR2 (20),
  DISABIL_FROM_DATE VARCHAR2 (8),
  DISABIL_TO_DATE VARCHAR2 (8),
  BENEFITS_START VARCHAR2 (8),
  BENEFITS_THROUGH VARCHAR2 (8),
  DIS_TYPE VARCHAR2 (25),
  BEN_CALC_PAY_START VARCHAR2 (8),
  BEN_CALC_PAY_TO VARCHAR2 (8),
  FEDERAL_TAX_FLAG VARCHAR2 (1),
  SOCIAL_SEC_TAX_FLAG VARCHAR2 (1),
  MEDICARE_TAX_FLAG VARCHAR2 (1),
  STATE_TAX_FLAG VARCHAR2 (1),
  STD_DISABIL_TYPE VARCHAR2 (25),
  MONTHLY_RATE FLOAT,
  ELIG_DIS_BEN_FLAG VARCHAR2 (1),
  DIS_OPTION_CODE VARCHAR2 (25),
  PENSION_AMT FLOAT,
  SS_AMT FLOAT,
  OTHER_AMT FLOAT,
  RESERVE_E_OPENING FLOAT,
  RESERVE_E_CURRENT FLOAT,
  RESERVE_E_DATE VARCHAR2(8),
  PAID_E_TOTAL FLOAT,
  COLLECTION_E_TOTAL FLOAT,
  CLAIMANT_TYPE VARCHAR2 (25),
  OSHA_ACC_DESC VARCHAR2 (16),
  DATE_WORKED_LAST VARCHAR2 (8),
  DATE_RETURNED VARCHAR2 (8),
  STATE_DURATION VARCHAR2(4),
  DATE_FIRST_RESTRICT VARCHAR2(8),
  DATE_LAST_RESTRICT VARCHAR2(8),
  PERCENT_DISABLED VARCHAR2(4),
  SETTLEMENT_METHOD VARCHAR2(25),
  MGND_CARE_ORG_TYPE VARCHAR2(25),
  DISPUTED_CASE_FLAG VARCHAR2(1),
  NCCI_LOSS_TYPE_LOSS_CODE VARCHAR2(25),
  NCCI_LOSS_TYPE_RECOV_CODE VARCHAR2(25),
  TREATMENT_CODE VARCHAR2(25),
  CLAIMANT_STATUS VARCHAR2(25),
  NAME_TYPE VARCHAR2(25),
  BENEFICIARY_CODE VARCHAR2(25),
  INFO_REQ_DATE VARCHAR2(8),
  PROOF_OF_LOSS_DATE VARCHAR2(8),
  CLAIM_CAUSE_CODE VARCHAR2(25),
  DEF_BIRTH_DT VARCHAR2(8),
  POLICY_LOB VARCHAR2(25),
  CURR_CODE VARCHAR2(25),
  CLAIM_TYPE_DATE_CHANGED VARCHAR2(8),
  REVIEW_STATUS_CODE VARCHAR2(25), 
  REVIEW_STATUS_DATE_CHANGED VARCHAR2(8), 
  REVIEW_REASON VARCHAR2(2000), 
  CLAIM_TYPE_REASON VARCHAR2(2000),   
  CONSTRAINT "PK_DDS_CLAIM" PRIMARY KEY ("DA_ROW_ID","JOBID")
)';
END IF;


--==========================================================
---CREATE DDS_EVENT TABLE 
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_EVENT';
IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE DDS_EVENT';
iExists := 0 ;
END IF;
IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'Create table DDS_EVENT (
    JOBID NUMBER NOT NULL,
    DA_ROW_ID NUMBER NOT NULL,
    INPUT_ROW_ID NUMBER ,
    INVALID_ROW NUMBER,
    UPDATE_ROW NUMBER ,   
    EVENT_NUMBER varchar2(25)  ,                 
    EVENT_TYPE_CODE  varchar2(25),
    EVENT_STATUS_CODE  varchar2(25),
    EVENT_IND_CODE  varchar2(25),
    EVENT_DESCRIPTION  CLOB,
    BRIEF_DESCRIPTION  varchar2(250),
    DEPARTMENT  varchar2(25),
    DEPT_INVOLVED  varchar2(25),
    ADDR1  varchar2(100),
    ADDR2  varchar2(100),
    CITY  varchar2(50),
    STATE  varchar2(4),
    ZIP_CODE  varchar2(10),
    COUNTRY  varchar2 (20),
    COUNTY_OF_INJURY  varchar2(50),
    LOCATION_AREA_DESC  CLOB,
    PRIMARY_LOC_CODE  varchar2(25),
    LOCATION_TYPE_CODE  varchar2(25),
    ON_PREMISE_FLAG  varchar2(1),
    NO_OF_INJURIES  NUMBER,
    NO_OF_FATALITIES  NUMBER,
    CAUSE_CODE  varchar2(25),
    DATE_OF_EVENT  varchar2(8),
    TIME_OF_EVENT  varchar2(6),
    DATE_REPORTED  varchar2(8),
    TIME_REPORTED  varchar2(6),
    REPORTED_TAX_ID   varchar2(20) ,
    REPORTED_LAST_NAME  varchar2(255),
    REPORTED_FIRST_NAME  varchar2(255),
    REPORTED_ADDR1  varchar2(100),
    REPORTED_ADDR2 varchar2(100),
    REPORTED_CITY   varchar2(50),
    REPORTED_STATE  varchar2(4),
    REPORTED_ZIP_CODE  varchar2(10),
    REPORTED_PHONE  varchar2(30),
    COMMENTS  CLOB,
    ACTIVITY_WHEN_INJ  varchar2(255),
    HOW_ACC_OCCURRED  varchar2(255),
    OBJ_SUBST_THAT_INJ  varchar2(255),
    RECORDABLE_FLAG  varchar2(1),
    SAFEG_NOTUSED_FLAG  varchar2(1),
    SAFEGUARD_FLAG  varchar2(1),
    NO_RULES_FLAG  varchar2(1),
    DATE_PHYS_ADVISED  varchar2(8),
    TIME_PHYS_ADVISED  varchar2(8),    
    ACTION_1_CODE varchar2(25),
    ACTION_2_CODE varchar2(25),
    ACTION_3_CODE varchar2(25),
    ACTION_4_CODE varchar2(25),
    ACTION_5_CODE varchar2(25),
    OUTCOME_1_CODE varchar2(25),
    OUTCOME_2_CODE varchar2(25),
    OUTCOME_3_CODE varchar2(25),
    OUTCOME_4_CODE varchar2(25),
    OUTCOME_5_CODE varchar2(25),  
    DATE_TO_FOLLOW_UP  varchar2(129),
    TREATMENT_GIVEN   varchar2 (8),
    RELEASE_SIGNED   varchar2(1),
    DEPT_HEAD_ADVISED   varchar2(1),
    PHYS_NOTES  CLOB,
    DATE_CARRIER_NOTIF  varchar2(8),
    PI_SUFFIX  NUMBER,
    PI_TAX_ID  varchar2 (20),
    PI_LAST_NAME  varchar2(255),
    PI_FIRST_NAME  varchar2(255),
    PI_ADDR1  varchar2(100),
    PI_ADDR2  varchar2(100),
    PI_CITY  varchar2(50),
    PI_STATE  varchar2(4),
    PI_ZIP_CODE  varchar2 (10),
    PI_PHONE  varchar2 (30) ,
    PI_TYPE_CODE  varchar2(50),
    MARITAL_STAT_CODE  varchar2(1),
    SEX_CODE  varchar2(8),
    BIRTH_DATE  varchar2(8),
    DATE_OF_DEATH  varchar2(8),
    ILLNESS_CODE  varchar2(25),
    INJURY_1_CODE varchar2(25),
    INJURY_2_CODE varchar2(25),
    INJURY_3_CODE varchar2(25),
    INJURY_4_CODE varchar2(25),
    INJURY_5_CODE varchar2(25),
    BODY_PART_1_CODE varchar2(25),
    BODY_PART_2_CODE varchar2(25),
    BODY_PART_3_CODE varchar2(25),
    BODY_PART_4_CODE varchar2(25),
    BODY_PART_5_CODE varchar2(25),
    DIAGNOSIS_1_CODE varchar2(25),
    DIAGNOSIS_2_CODE varchar2(25),
    DIAGNOSIS_3_CODE varchar2(25),
    DIAGNOSIS_4_CODE varchar2(25),
    DIAGNOSIS_5_CODE varchar2(25),
    TREATMENT_1_CODE varchar2(25),
    TREATMENT_2_CODE varchar2(25),
    TREATMENT_3_CODE varchar2(25),
    TREATMENT_4_CODE varchar2(25),
    TREATMENT_5_CODE varchar2(25),
    PHYSICIAN_1_LAST_NAME varchar2(50),
    PHYSICIAN_1_FIRST_NAME  varchar2(25),
    PHYSICIAN_1_PHONE  varchar2(30),
    PHYSICIAN_2_LAST_NAME varchar2(50),
    PHYSICIAN_2_FIRST_NAME  varchar2(25),
    PHYSICIAN_2_PHONE  varchar2(30),
    PHYSICIAN_3_LAST_NAME varchar2(50),
    PHYSICIAN_3_FIRST_NAME  varchar2(25),
    PHYSICIAN_3_PHONE  varchar2(30),
    HOSPITAL_1_NAME  varchar2(50),
    HOSPITAL_1_PHONE  varchar2(30),
    HOSPITAL_2_NAME  varchar2(50),
    HOSPITAL_2_PHONE  varchar2(30),
    HOSPITAL_3_NAME  varchar2(50),
    HOSPITAL_3_PHONE  varchar2(30),
    DRIVERS_LIC_NO  varchar2(20),    
    DRIVERSLICTYPECODE  varchar2(25),
    DATE_DRIVERSLICEXP  varchar2(8),
    DRIVLIC_RSTRCT_CODE  varchar2(25),    
    DRIVLIC_STATE  varchar2(4),
    COUNTY_OF_RESIDNC  varchar2(50),  
    NCCI_CLASS_CODE  varchar2(25),  
    EST_LEN_DISABILITY  NUMBER,
    INSURABLE_FLAG  varchar2(1)    ,
    LAST_VERIFIED_DATE  varchar2(8),    
    PATIENT_ACCT_NO  varchar2(20),
    MEDICAL_RCD_NO  varchar2(12),
    INS_PLAN_GROUP_NO  varchar2(16),
    DATE_OF_ADMISSION  varchar2(8),
    DATE_OF_DISCHARGE  varchar2(8),
    ADM_TYPE_CODE  varchar2(25),
    ADM_SOURCE_CODE  varchar2(25),
    ADMISSION_REASON  CLOB,
    ACUITY_LEVEL_CODE  varchar2(25),
    PATIENT_STAT_CODE  varchar2(25),
    PATIENT_COND_CODE  varchar2(25),
    DISCHARGE_DSP_CODE  varchar2(25),
    EXP_LENGTH_OF_STAY  NUMBER,
    EXPECTED_COST  NUMBER(20,2),
    QI_SIGNIF_CODE  varchar2(25),
    EPISODE_OF_CARE_ID  varchar2(8),
    PATIENT_TYPE_CODE  varchar2(25),
    WEIGHT NUMBER,
    EMERGENCY_CONTACT  varchar2(20),
    EMERGENCY_CONT_NO  varchar2(20),
    PATIENT_ROOM_NO  varchar2(14),
    FACILITY_UNIT_CODE  varchar2(25),
    FACILITY_DEPT  varchar2(25),
    HCO_ID_NO  varchar2(20),
    HCO_SITE_ID_NO  varchar2(20),
    WHY_AT_FACILITY  CLOB,
    DISABILITY_CODE  varchar2(25),      
    EMPLOYEE_NUMBER  varchar2(20),      
    POSITION_CODE  varchar2(25),      
    DEPT_ASSIGNED  varchar2(25),      
    SUPER_TAX_ID  varchar2(20),      
    SUPER_EMP_NO varchar2(34),	
    SUPER_LAST_NAME  varchar2(255),
    SUPER_FIRST_NAME  varchar2(255),      
    SUPER_ADDR1  varchar2(100),
    SUPER_ADDR2  varchar2(100),
    SUPER_CITY  varchar2(50),
    SUPER_STATE  varchar2(4),
    SUPER_ZIP_CODE  varchar2(10),
    SUPER_PHONE1  varchar2(30),
    FULL_TIME_FLAG  varchar2(1),
    PAY_TYPE_CODE  varchar2(25),
    HOURLY_RATE NUMBER(20,2),
    WEEKLY_HOURS  NUMBER(20,2),
    WEEKLY_RATE  NUMBER(20,2),
    PAY_AMOUNT  NUMBER(20,2),
    ACTIVE_FLAG  varchar2(1),
    DATE_HIRED  varchar2(8),
      DATE_LAST_WORKED_1  varchar2(8),
    DATE_RETURNED_1  varchar2(8),
    DATE_LAST_WORKED_2  varchar2(8),
    DATE_RETURNED_2  varchar2(8),
    DATE_LAST_WORKED_3  varchar2(8),
    DATE_RETURNED_3  varchar2(8),
    DATE_LAST_WORKED_4  varchar2(8),
    DATE_RETURNED_4  varchar2(8),
    DATE_LAST_WORKED_5  varchar2(8),
    DATE_RETURNED_5  varchar2(8),
    DATE_LAST_WORKED_6  varchar2(8),
    DATE_RETURNED_6  varchar2(8),
    DATE_LAST_WORKED_7  varchar2(8),
    DATE_RETURNED_7  varchar2(8),
    DATE_LAST_WORKED_8  varchar2(8),
    DATE_RETURNED_8  varchar2(8),
    DATE_LAST_WORKED_9  varchar2(8),
    DATE_RETURNED_9  varchar2(8),
    DATE_LAST_WORKED_10  varchar2(8),
    DATE_RETURNED_10 varchar2(8),
    DATE_LAST_WORKED_11  varchar2(8),
    DATE_RETURNED_11  varchar2(8),
    DATE_LAST_WORKED_12  varchar2(8),
    DATE_RETURNED_12 varchar2(8),
    DATE_LAST_WORKED_13  varchar2(8),
    DATE_RETURNED_13  varchar2(8),
    DATE_LAST_WORKED_14 varchar2(8),
    DATE_RETURNED_14  varchar2(8),
    DATE_LAST_WORKED_15  varchar2(8),
    DATE_RETURNED_15  varchar2(8),
    LOST_WORK_FLAG  varchar2(134),
    LEN_OF_SVC_DAYS  varchar2(1),
    EXEMPT_STATUS_FLAG  varchar2(1),
    NO_OF_EXEMPTIONS  varchar2(1),
    WORK_SUN_FLAG  varchar2(1),
    WORK_MON_FLAG  varchar2(1),
    WORK_TUE_FLAG  varchar2(1),
    WORK_WED_FLAG  varchar2(1),
    WORK_THU_FLAG  varchar2(1),
    WORK_FRI_FLAG  varchar2(1),
    WORK_SAT_FLAG  varchar2(1),
    WORKDAY_START_TIME  varchar2(6),
    WORK_PERMIT_DATE  varchar2(8),
    WORK_PERMIT_NUMBER  varchar2(50),
    REGULAR_JOB_FLAG  varchar2(1),
    HIRED_IN_STATE_FLAG  varchar2(1),
    NUM_OF_VIOLATION  NUMBER,
    DESC_BY_WITNESS  CLOB,
    USER_FIELD_A  CLOB,
    USER_FIELD_B  varchar2(255),
    USER_FIELD_C  varchar2(255),
    USER_FIELD_D  varchar2(255),
    USER_FIELD_E  varchar2(255),
    USER_FIELD_F  varchar2(255),
    USER_FIELD_G  varchar2(255),
    USER_FIELD_H  varchar2(255),
    USER_FIELD_I  varchar2(255),
    USER_FIELD_J  varchar2(255),
    USER_FIELD_K  varchar2(255),
    USER_FIELD_L  varchar2(255),
    USER_FIELD_M  varchar2(255),
    USER_FIELD_N  varchar2(255),
    USER_FIELD_O  varchar2(255),
    USER_FIELD_P  varchar2(255),
    USER_FIELD_Q  varchar2(255),
    USER_FIELD_R  varchar2(255),
    USER_FIELD_S  varchar2(255),
    USER_FIELD_T  varchar2(255),
    USER_FIELD_U  varchar2(255),
    USER_FIELD_V  varchar2(255),
    USER_FIELD_W  varchar2(255),
    USER_FIELD_X  varchar2(255),
    USER_FIELD_Y  varchar2(255),
    COND_PRIOR_CODE  varchar2(25),
    RAIL_POSITION_CODE  varchar2(25),
    RESTRAINT_CODE	 varchar2(25),
    BED_POSITION_CODE  varchar2(25),
    CALL_LIGHT_CODE  varchar2(25),
    REPORTED_COUNTRY  varchar2(25),
    REPORTED_PHONE2  varchar2(30),
    REPORTED_FAX  varchar2(30),
    PI_MIDDLE_NAME  varchar2(255),
    PRIVACY_CASE_FLAG  varchar2(1),
    SHARPS_OBJECT  varchar2(25),
    SHARPS_BRAND_MAKE  varchar2(25),
    SAFEG_PROVIDED  varchar2(1),
    RULES_NOT_FOLLOWED  varchar2(1),
    OSHA_ESTAB_EID  varchar2(25),
    NAME_TYPE  varchar2(25),
    REPORTED_BIRTH_DT VARCHAR2(8),
    BENEFICIARY_CODE VARCHAR2(25)
)';
 
EXECUTE IMMEDIATE 'ALTER TABLE DDS_EVENT ADD CONSTRAINT DDS_EVENT_PK PRIMARY KEY (JOBID, DA_ROW_ID)';

 --Note: The user ID and job ID of it will be passed in XML String which will be taken in last to execute the data from this table

END IF;
END;


--==========================================================
---CREATE DDS_MEDWATCH TABLE 
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_MEDWATCH';
IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE DDS_MEDWATCH';
iExists := 0 ;
END IF;
IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'Create table DDS_MEDWATCH(
JOBID NUMBER NOT NULL,
DA_ROW_ID NUMBER NOT NULL,
INVALID_ROW NUMBER NULL,
UPDATE_ROW NUMBER NULL,
INPUT_ROW_ID NUMBER NULL,
EVENT_NUMBER VARCHAR2(25) NULL,
UNIT_CODE VARCHAR2(25) NULL,
DATE_RPTD_FDA VARCHAR2(8) NULL,
DATE_RPTD_MFG VARCHAR2(8) NULL,
RPTD_BY_LAST_NAME VARCHAR2(255) NULL,
RPTD_BY_FIRST_NAME VARCHAR2(255) NULL,
RPTD_BY_ADDR1 VARCHAR2(100) NULL,
RPTD_BY_ADDR2 VARCHAR2(100) NULL,
RPTD_BY_CITY VARCHAR2(50) NULL,
RPTD_BY_STATE VARCHAR2(4) NULL,
RPTD_BY_ZIP_CODE VARCHAR2(10) NULL,
RPTD_BY_TAX_ID VARCHAR2(20) NULL,
RPTD_BY_PRO_FLAG VARCHAR2(1) NULL,
RPTD_BY_POS_CODE VARCHAR2(25) NULL,
RELEVANT_HISTORY CLOB NULL,
LAST_REPORT_DATE VARCHAR2(8) NULL,
REPORT_YEAR NUMBER NULL,
REPORT_SERIAL_NO NUMBER NULL,
ADVERSE_EVENT_FLAG VARCHAR2(1) NULL,
PRODUCT_PROB_FLAG VARCHAR2(1) NULL,
LIFE_THREAT_FLAG VARCHAR2(1) NULL,
HOSPITALIZ_FLAG VARCHAR2(1) NULL,
DISABILITY_FLAG VARCHAR2(1) NULL,
CONGENITAL_FLAG VARCHAR2(1) NULL,
REQD_INTERV_FLAG VARCHAR2(1) NULL,
FOLLOW_UP_COUNT NUMBER NULL,
RPT_MANDATORY VARCHAR2(1) NULL,
MED_TYPE VARCHAR2(25) NULL,
MED_NAME VARCHAR2(25) NULL,
DOSE VARCHAR2(25) NULL,
FREQUENCY VARCHAR2(25) NULL,
ROUTE VARCHAR2(25) NULL,
THERAPY_FROM_DATE VARCHAR2(8) NULL,
THERAPY_TO_DATE VARCHAR2(8) NULL,
DURATION NUMBER NULL,
LOT_NUMBER VARCHAR2(15) NULL,
NDC_NUMBER NUMBER NULL,
EXPIRATION_DATE VARCHAR2(8) NULL,
EVENT_ABATED VARCHAR2(1) NULL,
EVENT_REAPPEARED VARCHAR2(1) NULL,
DIAGNOSIS_TEST VARCHAR2(25) NULL,
BRAND_NAME VARCHAR2(25) NULL,
EQUIP_TYPE_CODE VARCHAR2(25) NULL,
MANUF_NAME VARCHAR2(255) NULL,
MANUF_ADDR1 VARCHAR2(100) NULL,
MANUF_ADDR2 VARCHAR2(100) NULL,
MANUF_CITY VARCHAR2(50) NULL,
MANUF_STATE VARCHAR2(4) NULL,
MANUF_ZIP_CODE VARCHAR2(10) NULL,
MODEL_NUMBER VARCHAR2(15) NULL,
CATALOG_NUMBER VARCHAR2(15) NULL,
SERIAL_NUMBER VARCHAR2(15) NULL,
OTHER_NUMBER VARCHAR2(15) NULL,
DEVICE_OPER_CODE VARCHAR2(25) NULL,
IMPLANT_DATE VARCHAR2(8) NULL,
EXPLANT_DATE VARCHAR2(8) NULL,
AGE_OF_DEVICE VARCHAR2(12) NULL,
DEV_AVAIL_FOR_EVAL VARCHAR2(1) NULL,
DEVICE_RETURN_DATE VARCHAR2(8) NULL,
EQ_LOT_NUMBER VARCHAR2(15) NULL,
EQ_EXPIRATION_DATE VARCHAR2(8) NULL,
TEST_LAB_TEST_1 CLOB NULL,
TEST_LAB_TEST_2 CLOB NULL,
TEST_LAB_TEST_3 CLOB NULL,
TEST_LAB_TEST_4 CLOB NULL,
TEST_LAB_TEST_5 CLOB NULL,
TEST_RESULT_1 CLOB NULL,
TEST_RESULT_2 CLOB NULL,
TEST_RESULT_3 CLOB NULL,
TEST_RESULT_4 CLOB NULL,
TEST_RESULT_5 CLOB NULL,
TEST_DATE_1 VARCHAR2(8) NULL,
TEST_DATE_2 VARCHAR2(8) NULL,
TEST_DATE_3 VARCHAR2(8) NULL,
TEST_DATE_4 VARCHAR2(8) NULL,
TEST_DATE_5 VARCHAR2(8) NULL,
CONCOM_PRODUCT_ID_1 NUMBER NULL,
CONCOM_PRODUCT_ID_2 NUMBER NULL,
CONCOM_PRODUCT_ID_3 NUMBER NULL,
CONCOM_PRODUCT_ID_4 NUMBER NULL,				
CONCOM_PRODUCT_ID_5 NUMBER NULL,
CONCOM_PRODUCT_ID_6 NUMBER NULL,
CONCOM_FROM_DATE_1 VARCHAR2(8) NULL,
CONCOM_FROM_DATE_2 VARCHAR2(8) NULL,
CONCOM_FROM_DATE_3 VARCHAR2(8) NULL,
CONCOM_FROM_DATE_4 VARCHAR2(8) NULL,
CONCOM_FROM_DATE_5 VARCHAR2(8) NULL,
CONCOM_FROM_DATE_6 VARCHAR2(8) NULL,
CONCOM_TO_DATE_1 VARCHAR2(8) NULL,
CONCOM_TO_DATE_2 VARCHAR2(8) NULL,
CONCOM_TO_DATE_3 VARCHAR2(8) NULL,
CONCOM_TO_DATE_4 VARCHAR2(8) NULL,
CONCOM_TO_DATE_5 VARCHAR2(8) NULL,
CONCOM_TO_DATE_6 VARCHAR2(8) NULL,
CONCOM_PRODUCT_1 VARCHAR2(40) NULL,
CONCOM_PRODUCT_2 VARCHAR2(40) NULL,
CONCOM_PRODUCT_3 VARCHAR2(40) NULL,
CONCOM_PRODUCT_4 VARCHAR2(40) NULL,
CONCOM_PRODUCT_5 VARCHAR2(40) NULL,
CONCOM_PRODUCT_6 VARCHAR2(40) NULL,
USER_FIELD_A CLOB NULL,
USER_FIELD_B VARCHAR2(255) NULL,
USER_FIELD_C VARCHAR2(255) NULL,
USER_FIELD_D VARCHAR2(255) NULL,
USER_FIELD_E VARCHAR2(255) NULL,
USER_FIELD_F VARCHAR2(255) NULL,
USER_FIELD_G VARCHAR2(255) NULL,
USER_FIELD_H VARCHAR2(255) NULL,
USER_FIELD_I VARCHAR2(255) NULL,
USER_FIELD_J VARCHAR2(255) NULL,
USER_FIELD_K VARCHAR2(255) NULL,
USER_FIELD_L VARCHAR2(255) NULL,
USER_FIELD_M VARCHAR2(255) NULL,
USER_FIELD_N VARCHAR2(255) NULL,
USER_FIELD_O VARCHAR2(255) NULL,
USER_FIELD_P VARCHAR2(255) NULL,
USER_FIELD_Q VARCHAR2(255) NULL,
USER_FIELD_R VARCHAR2(255) NULL,
USER_FIELD_S VARCHAR2(255) NULL,
USER_FIELD_T VARCHAR2(255) NULL,
USER_FIELD_U VARCHAR2(255) NULL,
USER_FIELD_V VARCHAR2(255) NULL,
USER_FIELD_W VARCHAR2(255) NULL,
USER_FIELD_X VARCHAR2(255) NULL,
USER_FIELD_Y VARCHAR2(255) NULL,
NAME_TYPE VARCHAR2(25) NULL,
RPTD_BY_BIRTH_DT VARCHAR2(8) NULL,
MANUF_BIRTH_DT VARCHAR2(8) NULL
)';
 
EXECUTE IMMEDIATE 'ALTER TABLE DDS_MEDWATCH ADD CONSTRAINT DDS_MEDWATCH_PK PRIMARY KEY (JOBID, DA_ROW_ID)';

 --Note: The user ID and job ID of it will be passed in XML String which will be taken in last to execute the data from this table

END IF;
END;

-------------TSART


--==========================================================
---CREATE DDS_ADJUSTER TABLE 
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_ADJUSTER';
IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE DDS_ADJUSTER';
iExists := 0 ;
END IF;
IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'Create table DDS_ADJUSTER(
    JOBID NUMBER NOT NULL,
    DA_ROW_ID  NUMBER NOT NULL,
    INVALID_ROW NUMBER NOT NULL,
    RECORD_TYPE VARCHAR2(25),
    CLAIM_ID VARCHAR2(25),
    ADJ_DATE VARCHAR2(8),
    ADJ_TIME VARCHAR2(6),
    FIRST_NAME VARCHAR2(255),
    LAST_NAME VARCHAR2(255),
    TEXT CLOB,
    ADJUSTER_TYPE VARCHAR2(25),
    NAME_TYPE VARCHAR2(25)
)';
 
EXECUTE IMMEDIATE 'ALTER TABLE DDS_ADJUSTER ADD CONSTRAINT DDS_ADJUSTER_PK PRIMARY KEY (JOBID, DA_ROW_ID)';

 --Note: The user ID and job ID of it will be passed in XML String which will be taken in last to execute the data from this table

END IF;
END;

-----





--MKAUR24 
--==========================================================
-- Supplemental tables
-- DDS_EVENT_USR_SUPP_MAP
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_MEDWATCH_USR_SUPP_MAP';

--IF iExists != 0 THEN
--EXECUTE IMMEDIATE
--'DROP TABLE DDS_MEDWATCH_USR_SUPP_MAP';
--iExists := 0 ;
--END IF;

IF iExists = 0 THEN
-- This is the master table from where we will show the values at UI.
-- i.e. which import area can be mapped or used which table.
-- it is having insert queries also
 EXECUTE IMMEDIATE ' CREATE TABLE DDS_MEDWATCH_USR_SUPP_MAP(
      OPTIONSET_ID NUMBER NULL,
      CONFIG_ID NUMBER NULL,
      USER_ID NUMBER NULL,
      FIELD_NUM VARCHAR2(10) NULL,
      USER_FIELD_NAME VARCHAR2(25) NULL,
      MAP_FLAG VARCHAR2(10) NULL,
      FIELD_TYPE VARCHAR2(25) NULL,
      MAPPED_TABLE VARCHAR2(50) NOT NULL,
      MAPPED_FIELD VARCHAR2(50) NOT NULL,
      NULL_FLAG VARCHAR2(10) NULL,
      VALIDATE_FLAG VARCHAR2(10) NULL,
      CODE_TABLE_ID VARCHAR2(10) NULL
  )
';

END IF;
END;

--mkaur24 end


--==========================================================
---CREATE DDS_PAYMENT
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_PAYMENT';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE DDS_PAYMENT';
iExists := 0 ;
END IF;

IF iExists = 0 THEN

  EXECUTE IMMEDIATE 'CREATE TABLE DDS_PAYMENT(
  DA_ROW_ID number NOT NULL,
  JOBID number NOT NULL,
  INPUT_ROW_ID number,
  INVALID_ROW number,
  UPDATE_ROW number,
  RECORD_TYPE varchar2(1),
  TRANSACTION_TYPE varchar2(1),
  CLAIM_ID varchar2(25),
  ACTIVITY_DATE varchar2(8),
  TYPE_FLAG varchar2(1),
  AMOUNT float,
  MEMO varchar2(255),
  CARRIER varchar2(16),
  ADJUSTER varchar2(16),
  CHECK_NO varchar2(25),
  CHECK_SUFFIX number,
  CHECK_STATUS varchar2(1),
  TYPE_CODE varchar2(25),
  PAYEE_TYPE varchar2(25),
  PAYEE_TAX_ID_NO varchar2(20),
  PAYEE_LASTNAME varchar2(255),
  PAYEE_FIRSTNAME varchar2(255),
  PAYEE_ADDRESS varchar2(100),
  PAYEE_CITY varchar2(50),
  PAYEE_STATE varchar2(4),
  PAYEE_ZIP varchar2(10),
  TRANSACTION_DATE varchar2(8),
  REPORT_1099_FLAG varchar2(1),
  SERVICE_FROM_DATE varchar2(8),
  SERVICE_TO_DATE varchar2(8),
  CLEARED_FLAG varchar2(1),
  DATE_CLEARED varchar2(8),
  BANK_ACCOUNT_NUM varchar2(20),
  BANK_SUB_ACCNT_NUM varchar2(20),
  PAYEE_ADDRESS2 varchar2(100),
  USER_FIELD_A clob,
  USER_FIELD_B varchar2(255),
  USER_FIELD_C varchar2(255),
  USER_FIELD_D varchar2(255),
  USER_FIELD_E varchar2(255),
  USER_FIELD_F varchar2(255),
  USER_FIELD_G varchar2(255),
  USER_FIELD_H varchar2(255),
  USER_FIELD_I varchar2(255),
  USER_FIELD_J varchar2(255),
  USER_FIELD_K varchar2(255),
  USER_FIELD_L varchar2(255),
  USER_FIELD_M varchar2(255),
  USER_FIELD_N varchar2(255),
  USER_FIELD_O varchar2(255),
  USER_FIELD_P varchar2(255),
  USER_FIELD_Q varchar2(255),
  USER_FIELD_R varchar2(255),
  USER_FIELD_S varchar2(255),
  USER_FIELD_T varchar2(255),
  USER_FIELD_U varchar2(255),
  USER_FIELD_V varchar2(255),
  USER_FIELD_W varchar2(255),
  USER_FIELD_X varchar2(255),
  USER_FIELD_Y varchar2(255),
  USER_FIELD_Z varchar2(255),
  INVOICE_NUMBER varchar2(25),
  CLAIMANT_SUFFIX number,
  RES_STATUS_CODE varchar2(25),
  UNIT_TYPE varchar2(10),
  POLICY_NAME varchar2(20),
  UNIT_NUMBER varchar2(10),
  COVERAGE_CODE varchar2(25),
  LOSS_CODE varchar2(25),
  RESERVE_SUB_TYPE varchar2(25),
  DISABILITY_CATEGORY varchar2(25),
  VOID_CODE_REASON varchar2(255),
  MODULE_NO varchar2(10),
  PREFIX varchar2(25),
  SUFFIX_COMMON varchar2(25),
  SUFFIX_LEGAL varchar2(50),
  MEMO_PHRASE varchar2(50),
  CLASS_CODE varchar2(25),
  CVG_SEQUENCE_NO varchar2(8),
  TRANS_SEQ_NO varchar2(8),
  CVG_DESC varchar2(100),
  SUBLINE_DESC varchar2(100),
  CLASS_DESC varchar2(100),
  STAT_UNIT_NUMBER varchar2(10),
  POLICY_CVG_SEQNO varchar2(10),
  RESERVE_TYPE varchar2(25),
  NAME_TYPE varchar2(25),
  POLICY_NUMBER varchar2(40),
  POLICY_SYMBOL varchar2(20),
  MASTER_COMPANY varchar2(10),
  LOCATION_COMPANY varchar2(10),
  DSTRBN_TYPE_CODE varchar2(25),
  PAYEE_DOB VARCHAR2(8),
  REGION VARCHAR2(4),
  BEN_REVIEW_DATE VARCHAR2(8),
  EOB_REMARKS_CODE_1 VARCHAR2(25),
  EOB_REMARKS_CODE_2 VARCHAR2(25),
  EOB_REMARKS_CODE_3 VARCHAR2(25),
  EOB_REMARKS_CODE_4 VARCHAR2(25),
  EOB_REMARKS_CODE_5 VARCHAR2(25),
  EOB_PRINTED_DATE VARCHAR2(8),
  EOB_PRINTED_BY_USER VARCHAR2(50),
  UNIT_FIRST_NAME VARCHAR2(255),
  UNIT_LAST_NAME VARCHAR2(255),
  UNIT_TAX_ID VARCHAR2(20),
  UNIT_DOB VARCHAR2(8),
  CLMNT_LAST_NAME VARCHAR2(255),
  CLMNT_FIRST_NAME VARCHAR2(255),
  CLMNT_TAX_ID VARCHAR2(20),
  EMP_NUM VARCHAR2(20),
  UNIT_ID VARCHAR2(20),
  PMT_CURR_CODE VARCHAR2(25),
  PMT_TO_BASE_CURR_RATE NUMBER(20,2),
  PMT_TO_POL_CURR_RATE NUMBER(20,2),
  PMT_TO_CLM_CURR_RATE NUMBER(20,2),
  CLM_TO_BASE_CURR_RATE NUMBER(20,2),
  CLM_TO_POL_CURR_RATE NUMBER(20,2)
  )';
EXECUTE IMMEDIATE 'ALTER TABLE DDS_PAYMENT ADD CONSTRAINT PK_DDS_PAYMENT PRIMARY KEY (DA_ROW_ID, JOBID)';

END IF;
END;

--==========================================================
---CREATE DDS_OPTIONSET TABLE 
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_OPTIONSET';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE DDS_OPTIONSET';
iExists := 0 ;
END IF;

IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'CREATE TABLE DDS_OPTIONSET (
  JOBID NUMBER NOT NULL,
  PERFORM_VERIFICATION NUMBER,
  EVENTS_AVAILABLE NUMBER,
  MED_WATCH_AVAILABLE NUMBER,
  CLAIMS_AVAILABLE NUMBER,
  STD_AVAILABLE NUMBER,
  ADJUSTER_NOTES_AVAILABLE NUMBER,
  PAYMENTS_AVAILABLE NUMBER,
  PAYMENT_SUB_ACCOUNT NUMBER,
  PAYMENT_BANK_ACCOUNT NUMBER,
  ENHANCED_NOTES_AVAILABLE NUMBER,
  ALLOW_NEW_CODES NUMBER,
  NON_EMP_MATCH_BY_NAME_TAX_ID NUMBER,
  ALLOW_NEW_DEPARTMENT NUMBER,
  CHK_DUPLICATE_ENTITY NUMBER,
  CHK_CREATE_NEWENTITY NUMBER,
  EMPLOYEE_MATCH_BY_NAME NUMBER,
  EMPLOYEE_MATCH_BY_TAX_ID NUMBER,
  EMPLOYEE_MATCH_BY_DOB NUMBER,
  EMPLOYEE_MATCH_BY_EMP_NUM NUMBER,
  NON_EMP_MATCH_BY_NAME NUMBER,
  NON_EMP_MATCH_BY_TAX_ID NUMBER,
  NON_EMP_MATCH_BY_DOB NUMBER,
  CREATE_PI_ENT_IF_TAXID_EMPTY NUMBER,
  ALLOW_NEW_EMPLOYEES NUMBER,
  ALLOW_NEW_CLAIMS NUMBER,
  UPDATE_CLAIMANT_DETAILS NUMBER,
  ID_CLAIMANT_BY_NAME_GCVA NUMBER,
  ID_CLAIMANT_BY_SUFFIX_GCVA NUMBER,
  UPDATE_CLAIMANT_NAME_GCVA NUMBER,
  CRT_ENT_IF_TAXID_EMPTY_GCVA NUMBER,
  UPDATE_CLAIMANT_NAME_WC NUMBER,
  ATTACH_TRANS_ID_TO_CHECK_NO NUMBER,
  RECALCULATE_RESERVES NUMBER,
  DONT_CHECK_DUPLICATE_PAYMENTS NUMBER,
  CHECK_DUPLICATE_RESERVE_TRANS NUMBER,
  ID_CLAIMANT_BY_NAME NUMBER,  
  ID_CLAIMANT_BY_SUFFIX NUMBER, 
  VALIDATE_SUPPLEMENTALS NUMBER,
  SET_ADJUSTER_AS_CURRENT NUMBER,
  EN_ENT_MATCH_BY_NAME NUMBER,
  EN_ENT_MATCH_BY_TAX_ID NUMBER,
  EN_ENT_MATCH_BY_ABBRV NUMBER,
  EVENT_SUPP NUMBER,
  CLAIM_SUPP NUMBER,
  PAYMENT_SUPP NUMBER,  
  CONFIG_ID NUMBER NOT NULL,
  ORGSEC_FLAG NUMBER,
  DIARY_TO_USERS VARCHAR2(255),
  USE_TRANSACTIONS NUMBER,
  VALID_START_DATE VARCHAR2(8),
  VALID_END_DATE VARCHAR2(8),
  MAX_ERRORS NUMBER,
  EVENT_IMPORTFILE_NAME VARCHAR2(255),
  MEDWATCH_IMPORTFILE_NAME VARCHAR2(255),
  CLAIM_IMPORTFILE_NAME VARCHAR2(255),
  STD_PLAN_IMPORTFILE_NAME VARCHAR2(255),
  STD_CLASS_IMPORTFILE_NAME VARCHAR2(255),
  ADJUSTER_IMPORTFILE_NAME VARCHAR2(255),
  PAYMENT_IMPORTFILE_NAME VARCHAR2(255),
  EN_IMPORTFILE_NAME VARCHAR2(255),
  OPTIONSET_NAME VARCHAR2(50),
  ENHNOTES_CLMNT_NAME NUMBER,   
  ENHNOTES_CLMNT_TAX NUMBER,  
  ENHNOTES_CLMNT_ABBREVIATION NUMBER,    
  MEDWATCH_SUPP NUMBER,   
  STDPLAN_SUPP NUMBER, 
  CONSTRAINT PK_DDS_OPTIONSET PRIMARY KEY (JOBID)
)';
END IF;
END;


--==========================================================
-- Supplemental tables
-- DDS_SUPP_GLOSSARY
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_SUPP_GLOSSARY';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE DDS_SUPP_GLOSSARY';
iExists := 0 ;
END IF;

IF iExists = 0 THEN
-- This is the master table from where we will show the values at UI.
-- i.e. which import area can be mapped or used which table.
-- it is having insert queries also
 EXECUTE IMMEDIATE 'CREATE TABLE DDS_SUPP_GLOSSARY 
    (TABLE_ID NUMBER,
    SYSTEM_TABLE_NAME VARCHAR2(100),
    ALLOW_CLAIM_MAP VARCHAR2(10),
    ALLOW_PAY_MAP VARCHAR2(10),
    ALLOW_EVENT_MAP VARCHAR2(10),
    ALLOW_PLAN_MAP VARCHAR2(10),
    ALLOW_MEDWATCH_MAP VARCHAR2(10)
    )
';

END IF;
END;


--==========================================================
-- User Verification tables
-- USER_VERIFICATION
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='USER_VERIFICATION';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE USER_VERIFICATION';
iExists := 0 ;
END IF;

IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'CREATE TABLE USER_VERIFICATION(     
    JOBID NUMBER,
    OPTIONSET_ID NUMBER,
    MODULE_NAME varchar2(25),
    IMPORT_AREA varchar2(25),
    TABLE_NAME Varchar2(4000),
    VERIFICATION_FLAG NUMBER,
    STOP_VERIFICATION NUMBER
  )
';

END IF;
END;


--==========================================================
-- User Verification tables
-- DA_JOB_ID
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DA_JOB_ID';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE DA_JOB_ID';
iExists := 0 ;
END IF;

IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'CREATE TABLE DA_JOB_ID(     
    NEW_JOBID number NULL,
    JOBID  number NULL,
    OPTIONSET_ID number NULL
  )
';

END IF;
END;

--==========================================================
-- DA_STATISTICS
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DA_STATISTICS';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE DA_STATISTICS';
iExists := 0 ;
END IF;

IF iExists = 0 THEN
 EXECUTE IMMEDIATE 'CREATE TABLE  DA_STATISTICS (
    JOBID NUMBER NOT NULL,
    PASS_COUNT NUMBER NOT NULL,
    STAGE NUMBER ,
    IS_VALIDATION NUMBER ,
    IMPORT_MODULE_NAME varchar2(50) ,
    TABLE_NAME varchar2(50) NOT NULL,
    INPUT_ROW_COUNT NUMBER ,
    START_VALID_ROW_COUNT NUMBER ,
    START_INVALID_ROW_COUNT NUMBER ,
    END_VALID_ROW_COUNT NUMBER ,
    END_INVALID_ROW_COUNT NUMBER ,
    END_UPDATE_ROW_COUNT NUMBER ,
    TOTAL_ROWS NUMBER ,
    TOTAL_FAILED_VALIDATIONS NUMBER ,
    START_TIME varchar2(14) ,
    END_TIME varchar2(14))
';

EXECUTE IMMEDIATE 'ALTER TABLE DA_STATISTICS ADD CONSTRAINT DA_STATISTICS_PK PRIMARY KEY (JOBID,PASS_COUNT,TABLE_NAME)';

END IF;
END;


---CREATE DA_JOB_ID table 
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DA_JOB_ID';
IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE DA_JOB_ID';
iExists := 0 ;
END IF;
IF iExists = 0 THEN
  EXECUTE IMMEDIATE '  
 CREATE TABLE DA_JOB_ID(
    NEW_JOBID number NULL,
    JOBID  number NULL,
    OPTIONSET_ID number NULL
   )';
END IF;
END;


--==========================================================
-- Supplemental tables
-- DDS_EVENT_USR_SUPP_MAP
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_EVENT_USR_SUPP_MAP';

--IF iExists != 0 THEN
--EXECUTE IMMEDIATE
--'DROP TABLE DDS_EVENT_USR_SUPP_MAP';
--iExists := 0 ;
--END IF;

IF iExists = 0 THEN
-- This is the master table from where we will show the values at UI.
-- i.e. which import area can be mapped or used which table.
-- it is having insert queries also
 EXECUTE IMMEDIATE ' CREATE TABLE DDS_EVENT_USR_SUPP_MAP
   (    OPTIONSET_ID NUMBER,
  CONFIG_ID NUMBER,
  USER_ID NUMBER,
  FIELD_NUM VARCHAR2(10), 
  USER_FIELD_NAME VARCHAR2(25), 
  MAP_FLAG VARCHAR2(10), 
  FIELD_TYPE VARCHAR2(25), 
  MAPPED_TABLE VARCHAR2(50) NOT NULL, 
  MAPPED_FIELD VARCHAR2(50) NOT NULL, 
  NULL_FLAG VARCHAR2(10), 
  VALIDATE_FLAG VARCHAR2(10), 
  CODE_TABLE_ID VARCHAR2(10)
  )
';

END IF;
END;

--==========================================================
-- Supplemental tables
-- DDS_CLAIM_USR_SUPP_MAP -- NAME SHOULD BE CLAIM/ CLAIMS 
-- IF USING CLAIM HERE THEN BASE TABLE MUST BE
-- DDS_CLAIM IT CANNOT BE DDS_CLAIMS OTHERWISE 
-- SUPPLEMENT WON'T WORK
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_CLAIM_USR_SUPP_MAP';

--IF iExists != 0 THEN
--EXECUTE IMMEDIATE
--'DROP TABLE DDS_CLAIM_USR_SUPP_MAP';
--iExists := 0 ;
--END IF;

IF iExists = 0 THEN
-- This is the master table from where we will show the values at UI.
-- i.e. which import area can be mapped or used which table.
-- it is having insert queries also
 EXECUTE IMMEDIATE ' CREATE TABLE DDS_CLAIM_USR_SUPP_MAP
   (    OPTIONSET_ID NUMBER,
  CONFIG_ID NUMBER,
  USER_ID NUMBER,
  FIELD_NUM VARCHAR2(10), 
  USER_FIELD_NAME VARCHAR2(25), 
  MAP_FLAG VARCHAR2(10), 
  FIELD_TYPE VARCHAR2(25), 
  MAPPED_TABLE VARCHAR2(50) NOT NULL, 
  MAPPED_FIELD VARCHAR2(50) NOT NULL, 
  NULL_FLAG VARCHAR2(10), 
  VALIDATE_FLAG VARCHAR2(10), 
  CODE_TABLE_ID VARCHAR2(10)
  )
';

END IF;
END;


--==========================================================
-- Supplemental tables
-- DDS_PAYMENTS_USR_SUPP_MAP -- NAME SHOULD BE CLAIM/ CLAIMS 
-- IF USING CLAIM HERE THEN BASE TABLE MUST BE
-- DDS_CLAIM IT CANNOT BE DDS_CLAIMS OTHERWISE 
-- SUPPLEMENT WON'T WORK
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_PAYMENT_USR_SUPP_MAP';

--IF iExists != 0 THEN
--EXECUTE IMMEDIATE
--'DROP TABLE DDS_PAYMENT_USR_SUPP_MAP';
--iExists := 0 ;
--END IF;

IF iExists = 0 THEN
-- This is the master table from where we will show the values at UI.
-- i.e. which import area can be mapped or used which table.
-- it is having insert queries also
 EXECUTE IMMEDIATE ' CREATE TABLE DDS_PAYMENT_USR_SUPP_MAP
   (    OPTIONSET_ID NUMBER,
  CONFIG_ID NUMBER,
  USER_ID NUMBER,
  FIELD_NUM VARCHAR2(10), 
  USER_FIELD_NAME VARCHAR2(25), 
  MAP_FLAG VARCHAR2(10), 
  FIELD_TYPE VARCHAR2(25), 
  MAPPED_TABLE VARCHAR2(50) NOT NULL, 
  MAPPED_FIELD VARCHAR2(50) NOT NULL, 
  NULL_FLAG VARCHAR2(10), 
  VALIDATE_FLAG VARCHAR2(10), 
  CODE_TABLE_ID VARCHAR2(10)
  )
';

END IF;
END;



--==========================================================
-- Supplemental tables -- USED TO STORE DATA AT RUN TIME
-- DDS_SUPPLEMENTAL_RUNTIME_DATA
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_SUPPLEMENTAL_RUNTIME_DATA';

--IF iExists != 0 THEN
--EXECUTE IMMEDIATE
--'DROP TABLE DDS_SUPPLEMENTAL_RUNTIME_DATA';
--iExists := 0 ;
--END IF;

IF iExists = 0 THEN
-- This is the master table from where we will show the values at UI.
-- i.e. which import area can be mapped or used which table.
-- it is having insert queries also
 EXECUTE IMMEDIATE 'CREATE TABLE DDS_SUPPLEMENTAL_RUNTIME_DATA (
  JOBID           NUMBER,
  DA_ROW_ID NUMBER,
  UPDATE_ROW    NUMBER,
  INVALID_ROW NUMBER,
  CLAIMANT_EID NUMBER,
  EVENT_ID NUMBER,
  CLAIM_ID NUMBER,
  EMPLOYEE_EID NUMBER,
  UNIT_ID    NUMBER,
  ENTITY_ID NUMBER,
  DEFENDANT_ROW_ID  NUMBER,
  PI_ROW_ID    NUMBER,
  PI_PROC_ROW_ID  NUMBER,
  PATIENT_ID    NUMBER,
  TRANS_ID    NUMBER,
  PLAN_ID    NUMBER,
  EV_MW_TEST_ROW_ID NUMBER, --MKAUR24 MEDWATCH
  EV_CONCOM_ROW_ID NUMBER,	--MKAUR24 MEDWATCH
  MODULE_NAME VARCHAR2(100),
  USER_FIELD_A CLOB,
  USER_FIELD_B VARCHAR2(255),
  USER_FIELD_C VARCHAR2(255),
  USER_FIELD_D VARCHAR2(255),
  USER_FIELD_E VARCHAR2(255),
  USER_FIELD_F VARCHAR2(255),
  USER_FIELD_G VARCHAR2(255),
  USER_FIELD_H VARCHAR2(255),
  USER_FIELD_I VARCHAR2(255),
  USER_FIELD_J VARCHAR2(255),
  USER_FIELD_K VARCHAR2(255),
  USER_FIELD_L VARCHAR2(255),
  USER_FIELD_M VARCHAR2(255),
  USER_FIELD_N VARCHAR2(255),
  USER_FIELD_O VARCHAR2(255),
  USER_FIELD_P VARCHAR2(255),
  USER_FIELD_Q VARCHAR2(255),
  USER_FIELD_R VARCHAR2(255),
  USER_FIELD_S VARCHAR2(255),
  USER_FIELD_T VARCHAR2(255),
  USER_FIELD_U VARCHAR2(255),
  USER_FIELD_V VARCHAR2(255),
  USER_FIELD_W VARCHAR2(255),
  USER_FIELD_X VARCHAR2(255),
  USER_FIELD_Y VARCHAR2(255),
  USER_FIELD_Z VARCHAR2(255)
  )
';

--EXECUTE IMMEDIATE 'ALTER TABLE DDS_SUPPLEMENTAL_RUNTIME_DATA ADD CONSTRAINT DDS_SUPP_RUNTM_DT_PK PRIMARY KEY (JOBID, DA_ROW_ID)';

END IF;
END;


--==========================================================
---CREATE PROCESS_ENTITY TYPE
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM user_types WHERE TYPE_NAME='DDS_ENTITY_TYPE';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'drop type DDS_ENTITY_TYPE force';
iExists := 0 ;
END IF;

IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE DDS_ENTITY_TYPE IS OBJECT
(
vLastName varchar2(255),
vFirstName varchar2(255),
vMiddleName varchar2(255),
vAbbr varchar2(25),
vTaxId varchar2(20),
vAddr1 varchar2(100),
vAddr2 varchar2(100),
vCity varchar2(50),
vCountry number,
vState number,
vCounty varchar2(30),
vZip varchar2(10),
vPhone1 varchar2(30),
vPhone2 varchar2(30),
vFaxNumber varchar2(30),
vBirthDate varchar2(8),
vSexCode number,
vComment CLOB,
iParentEid NUMBER,
vTableName varchar2(30),
iRpt1099Flag NUMBER,
iPrefixCodeId NUMBER,
iSuffixCodeId NUMBER,
vSuffixLegal varchar2(50),
iNameType NUMBER,
vEmpNum varchar2(20),
iJobId NUMBER,
iDaRowId NUMBER
)';
END IF;
END;


--==========================================================
---CREATE DDS_ENTITY_TABTYPE TYPE
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM user_types WHERE TYPE_NAME='DDS_ENTITY_TABTYPE';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'drop type DDS_ENTITY_TABTYPE force';
iExists := 0 ;
END IF;

IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE DDS_ENTITY_TABTYPE AS TABLE OF DDS_ENTITY_TYPE';
END IF;
END;


--==========================================================
---CREATE DDS_ORG_HIERARCHY_TYPE TYPE
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM user_types WHERE TYPE_NAME='DDS_ORG_HIERARCHY_TYPE';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'drop type DDS_ORG_HIERARCHY_TYPE force';
iExists := 0 ;
END IF;

IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE DDS_ORG_HIERARCHY_TYPE IS OBJECT
(
  IJOBID NUMBER,
  IDAROWID NUMBER,
  VDEPARTMENT VARCHAR2(25),
  VLOCATION VARCHAR2(25),
  VDIVISION VARCHAR2(25),
  VCOMPANY VARCHAR2(25),
  VDEPARTMENT_DESC VARCHAR2(255),
  VLOCATION_DESC VARCHAR2(255),
  VDIVISION_DESC VARCHAR2(255),
  VCOMPANY_DESC VARCHAR2(255)
)';
END IF;
END;


--==========================================================
---CREATE DDS_ORG_HIERARCHY_TABTYPE TYPE
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM user_types WHERE TYPE_NAME='DDS_ORG_HIERARCHY_TABTYPE';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'drop type DDS_ORG_HIERARCHY_TABTYPE force';
iExists := 0 ;
END IF;

IF iExists = 0 THEN

 EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE DDS_ORG_HIERARCHY_TABTYPE AS TABLE OF DDS_ORG_HIERARCHY_TYPE';
END IF;
END;


--DSHARMA70 Short Term Disability Starts
BEGIN
  SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_STD_PLAN';
  IF iExists != 0 THEN
    EXECUTE IMMEDIATE 'DROP TABLE DDS_STD_PLAN';
    iExists := 0 ;
  END IF;
END;

IF iExists = 0 THEN
EXECUTE IMMEDIATE 'CREATE TABLE DDS_STD_PLAN(
  DA_ROW_ID NUMBER NOT NULL,
  JOBID NUMBER NOT NULL,
  INVALID_ROW NUMBER,
  PLAN_NUMBER VARCHAR2(20) ,
  PLAN_NAME VARCHAR2(20) ,
  PLAN_DESCRIPTION VARCHAR2(50) ,
  PLAN_STATUS VARCHAR2(25) ,
  PREMIUM NUMBER(20,2) ,
  BANK_ACCOUNT_NUM VARCHAR2(20) ,
  EFFECTIVE_DATE VARCHAR2(8) ,
  EXPIRATION_DATE VARCHAR2(8) ,
  ISSUE_DATE VARCHAR2(8) ,
  REVIEW_DATE VARCHAR2(8) ,
  RENEWAL_DATE VARCHAR2(8) ,
  CANCEL_DATE VARCHAR2(8) ,
  PREF_DAY_PAY_TYPE VARCHAR2(25) ,
  PREF_PAY_SCHEDULE_TYPE VARCHAR2(25) ,
  COMMENTS VARCHAR2(255) ,
  START_PAY_PERIOD VARCHAR2(8) ,
  PRINT_BEFORE_END_FLAG VARCHAR2(1) ,
  BANK_SUB_ACCNT_NUM VARCHAR2(20) ,
  INSURED_EID VARCHAR2(207) ,
  INSURED_HIER_LEVEL VARCHAR2(15) ,
  USER_FIELD_A CLOB ,
  USER_FIELD_B VARCHAR2(255) ,
  USER_FIELD_C VARCHAR2(255) ,
  USER_FIELD_D VARCHAR2(255) ,
  USER_FIELD_E VARCHAR2(255) ,
  USER_FIELD_F VARCHAR2(255) ,
  USER_FIELD_G VARCHAR2(255) ,
  USER_FIELD_H VARCHAR2(255) ,
  USER_FIELD_I VARCHAR2(255) ,
  USER_FIELD_J VARCHAR2(255) ,
  USER_FIELD_K VARCHAR2(255) ,
  USER_FIELD_L VARCHAR2(255) ,
  USER_FIELD_M VARCHAR2(255) ,
  USER_FIELD_N VARCHAR2(255) ,
  USER_FIELD_O VARCHAR2(255) ,
  USER_FIELD_P VARCHAR2(255) ,
  USER_FIELD_Q VARCHAR2(255) ,
  USER_FIELD_R VARCHAR2(255) ,
  USER_FIELD_S VARCHAR2(255) ,
  USER_FIELD_T VARCHAR2(255) ,
  USER_FIELD_U VARCHAR2(255) ,
  USER_FIELD_V VARCHAR2(255) ,
  USER_FIELD_W VARCHAR2(255) ,
  USER_FIELD_X VARCHAR2(255) ,
  USER_FIELD_Y VARCHAR2(255) ,  
  CONSTRAINT "PK_DDS_STD_PLAN" PRIMARY KEY ("DA_ROW_ID","JOBID")
)';
END IF;


BEGIN
  SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_STD_CLASS';
  IF iExists != 0 THEN
    EXECUTE IMMEDIATE 'DROP TABLE DDS_STD_CLASS';
    iExists := 0 ;
  END IF;
END;

IF iExists = 0 THEN
EXECUTE IMMEDIATE 'CREATE TABLE DDS_STD_CLASS(
  DA_ROW_ID NUMBER NOT NULL,
  JOBID NUMBER NOT NULL,
  INVALID_ROW NUMBER,  
  CLASS_NAME VARCHAR2(20),
  CLASS_DESC VARCHAR2(50),
  PLAN_NUMBER VARCHAR2(20),
  ELIG_BENE_PRD NUMBER,
  BENE_PRD_TYPE VARCHAR2(25),
  BENE_FROM_DT_TYPE VARCHAR2(25),
  DIS_WAIT_PRD NUMBER,
  DIS_CLNDR_WRK_TYPE VARCHAR2(25),
  DIS_PRD_TYPE VARCHAR2(25),
  DIS_MAX_PRD NUMBER,
  DIS_MAX_PRD_TYPE VARCHAR2(25),
  FROM_DIS_PRD_TYPE VARCHAR2(25),
  ALLOW_EXT VARCHAR2(1),
  EXTEND_PRD NUMBER,
  EXTEND_PRD_TYPE VARCHAR2(25),
  MAX_TOT_DIS_PRD NUMBER,
  MAX_TOT_PRD_TYPE VARCHAR2(25),
  ACTUAL_WORK_WEEK_FLAG VARCHAR2(1),
  DAY7_WORK_WEEK_FLAG VARCHAR2(1),
  DAY5_WORK_WEEK_FLAG VARCHAR2(1),
  OTHER_WORK_WEEK_FLAG VARCHAR2(1),
  OTHER_DAYS NUMBER,
  BENE_PRCTG_FLAG VARCHAR2(1),
  BENE_PER_AMT NUMBER(20,2),
  BENE_FLAT_AMT_FLAG VARCHAR2(1),
  BENE_FLAT_AMT NUMBER(20,2),
  BENE_TD_FLAG VARCHAR2(1),
  BENE_BASED_TYPE VARCHAR2(25),
  WITHHOLD_FED_ITAX_FLAG VARCHAR2(1),
  WITHHOLD_FICA_FLAG VARCHAR2(1),
  WEEKLY_BENE_CAP NUMBER(20,2),
  MAX_BEN_PER_CLAIM NUMBER(20,2),
  MAX_BEN_PER_CAL_YR NUMBER(20,2),
  WAGE_FOR_DIS_PRD NUMBER(20,2),
  WAGE_FOR_CAL_YR  NUMBER(20,2),
  TAXABLE_PERCENT  NUMBER(20,2),
  WITHHOLD_MEDICARE_FLAG VARCHAR2(1),
  WITHHOLD_STATE_FLAG VARCHAR2(1),
  USE_VOUCHERS_FLAG VARCHAR2(1),
  ALT_WAIT_DIS_TYPE VARCHAR2(207),
  ALT_WAIT_DIS_TYPE_1 VARCHAR2(25),
  ALT_WAIT_DIS_TYPE_2 VARCHAR2(25),
  ALT_WAIT_DIS_TYPE_3 VARCHAR2(25),
  ALT_WAIT_DIS_TYPE_4 VARCHAR2(25),
  ALT_WAIT_DIS_TYPE_5 VARCHAR2(25),
  ALT_WAIT_DIS_TYPE_6 VARCHAR2(25),
  ALT_WAIT_DIS_TYPE_7 VARCHAR2(25),
  ALT_WAIT_DIS_TYPE_8 VARCHAR2(25),
  ALT_WAIT_DIS_PRD VARCHAR2(39),
  ALT_WAIT_DIS_PRD_VAL_1 NUMBER,
  ALT_WAIT_DIS_PRD_VAL_2 NUMBER,
  ALT_WAIT_DIS_PRD_VAL_3 NUMBER,
  ALT_WAIT_DIS_PRD_VAL_4 NUMBER,
  ALT_WAIT_DIS_PRD_VAL_5 NUMBER,
  ALT_WAIT_DIS_PRD_VAL_6 NUMBER,
  ALT_WAIT_DIS_PRD_VAL_7 NUMBER,
  ALT_WAIT_DIS_PRD_VAL_8 NUMBER,
  ALT_WAIT_DIS_CLNDR_WRK_TYPE VARCHAR2(207),
  ALT_WAIT_DIS_CLNDR_WRK_TYPE_1 VARCHAR2(25),
  ALT_WAIT_DIS_CLNDR_WRK_TYPE_2 VARCHAR2(25),
  ALT_WAIT_DIS_CLNDR_WRK_TYPE_3 VARCHAR2(25),
  ALT_WAIT_DIS_CLNDR_WRK_TYPE_4 VARCHAR2(25),
  ALT_WAIT_DIS_CLNDR_WRK_TYPE_5 VARCHAR2(25),
  ALT_WAIT_DIS_CLNDR_WRK_TYPE_6 VARCHAR2(25),
  ALT_WAIT_DIS_CLNDR_WRK_TYPE_7 VARCHAR2(25),
  ALT_WAIT_DIS_CLNDR_WRK_TYPE_8 VARCHAR2(25),
  ALT_WAIT_DIS_PRD_TYPE VARCHAR2(207),
  ALT_WAIT_DIS_PRD_TYPE_1 VARCHAR2(25),
  ALT_WAIT_DIS_PRD_TYPE_2 VARCHAR2(25),
  ALT_WAIT_DIS_PRD_TYPE_3 VARCHAR2(25),
  ALT_WAIT_DIS_PRD_TYPE_4 VARCHAR2(25),
  ALT_WAIT_DIS_PRD_TYPE_5 VARCHAR2(25),
  ALT_WAIT_DIS_PRD_TYPE_6 VARCHAR2(25),
  ALT_WAIT_DIS_PRD_TYPE_7 VARCHAR2(25),
  ALT_WAIT_DIS_PRD_TYPE_8 VARCHAR2(25),
  WAGES_FROM VARCHAR2(175),
  WAGES_FROM_1 NUMBER(20,2),
  WAGES_FROM_2 NUMBER(20,2),
  WAGES_FROM_3 NUMBER(20,2),
  WAGES_FROM_4 NUMBER(20,2),
  WAGES_FROM_5 NUMBER(20,2),
  WAGES_FROM_6 NUMBER(20,2),
  WAGES_FROM_7 NUMBER(20,2),
  WAGES_FROM_8 NUMBER(20,2),
  WAGES_TO VARCHAR2(175),
  WAGES_TO_1 NUMBER(20,2),
  WAGES_TO_2 NUMBER(20,2),
  WAGES_TO_3 NUMBER(20,2),
  WAGES_TO_4 NUMBER(20,2),
  WAGES_TO_5 NUMBER(20,2),
  WAGES_TO_6 NUMBER(20,2),
  WAGES_TO_7 NUMBER(20,2),
  WAGES_TO_8 NUMBER(20,2),
  WEEKLY_BENEFIT VARCHAR2(175),
  WEEKLY_BENEFIT_1 NUMBER(20,2),
  WEEKLY_BENEFIT_2 NUMBER(20,2),
  WEEKLY_BENEFIT_3 NUMBER(20,2),
  WEEKLY_BENEFIT_4 NUMBER(20,2),
  WEEKLY_BENEFIT_5 NUMBER(20,2),
  WEEKLY_BENEFIT_6 NUMBER(20,2),
  WEEKLY_BENEFIT_7 NUMBER(20,2),
  WEEKLY_BENEFIT_8 NUMBER(20,2),
  DAY30_WORK_MONTH_FLAG VARCHAR2(1),
  ACTUAL_MONTH_FLAG VARCHAR2(1),
  UPPER_AGE_LIMIT NUMBER,
  LOWER_AGE_LIMIT NUMBER,
  SUPP_PERCENT NUMBER(20,2),
  SUPP_FLAT_AMT NUMBER(20,2),
  SUPP_BANK_ACC_NAME VARCHAR2(50),
  SUPP_SUB_ACC_NAME VARCHAR2(50),
  SUPP_TR_TYPE_CODE VARCHAR2(25),
  SUPP_SEP_PAY_FLAG VARCHAR2(1),
  PENSION_AMT NUMBER(20,2),
  SS_AMT NUMBER(20,2),
  OTHER_AMT NUMBER(20,2),
  PRORATE_OFF_FLAG VARCHAR2(1),
  FULLPAY_ONLY_FLAG VARCHAR2(1),
  CONSTRAINT "PK_DDS_STD_CLASS" PRIMARY KEY ("DA_ROW_ID","JOBID")
  )';
END IF;

BEGIN
  SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_STD_PLAN_USR_SUPP_MAP';
  IF iExists != 0 THEN
    EXECUTE IMMEDIATE 'DROP TABLE DDS_STD_PLAN_USR_SUPP_MAP';
    iExists := 0 ;
  END IF;
END;


IF iExists = 0 THEN
EXECUTE IMMEDIATE 'CREATE TABLE DDS_STD_PLAN_USR_SUPP_MAP(
    OPTIONSET_ID NUMBER ,
    CONFIG_ID NUMBER ,
    USER_ID NUMBER ,
    FIELD_NUM VARCHAR2(10) ,
    USER_FIELD_NAME VARCHAR2(25) ,
    MAP_FLAG VARCHAR2(10) ,
    FIELD_TYPE VARCHAR2(25) ,
    MAPPED_TABLE VARCHAR2(50) NOT NULL  ,
    MAPPED_FIELD VARCHAR2(50) NOT NULL ,
    NULL_FLAG VARCHAR2(10) ,
    VALIDATE_FLAG VARCHAR2(10) ,
    CODE_TABLE_ID VARCHAR2(10) 
)'; 
END IF;

--MKAUR24
--DSHARMA70 Short Term Disability Ends
--==========================================================
---CREATE DDS_ENHANCEDNOTES
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='DDS_ENHANCEDNOTES';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE DDS_ENHANCEDNOTES';
iExists := 0 ;
END IF;

IF iExists = 0 THEN

  EXECUTE IMMEDIATE 'CREATE TABLE DDS_ENHANCEDNOTES(
  	DA_ROW_ID number NOT NULL,
  	JOBID number NOT NULL,
  	INVALID_ROW number,
  	ID VARCHAR2(25),
	CLAIM_OR_EVENT VARCHAR2(1),
	NOTE_TYPE VARCHAR2(25),
	USER_TYPE VARCHAR2(25),
	NOTE_MEMO CLOB,
	ENTERED_BY VARCHAR2(50),
	DATE_ENTERED VARCHAR2(12),
	DATE_CREATED VARCHAR2(12),
	TIME_CREATED VARCHAR2(12),
	ENTERED_BY_NAME VARCHAR2(50),
	CLAIMANT_LASTNAME VARCHAR2(255),
	CLAIMANT_FIRSTNAME VARCHAR2(255),
	CLAIMANT_SSN VARCHAR2(20),
	ABBREVIATION VARCHAR2(25)
  )';
EXECUTE IMMEDIATE 'ALTER TABLE DDS_ENHANCEDNOTES ADD CONSTRAINT PK_DDS_ENHANCEDNOTES PRIMARY KEY (DA_ROW_ID, JOBID)';

END IF;
END;

--==========================================================
---CREATE TEMP_JOBS_DOCUMENT
--============================================================
BEGIN
SELECT COUNT(*) INTO iExists FROM USER_OBJECTS WHERE OBJECT_TYPE='TABLE' AND OBJECT_NAME='TEMP_JOBS_DOCUMENT';

IF iExists != 0 THEN
EXECUTE IMMEDIATE
'DROP TABLE TEMP_JOBS_DOCUMENT';
iExists := 0 ;
END IF;

IF iExists = 0 THEN

  EXECUTE IMMEDIATE 'CREATE TABLE TEMP_JOBS_DOCUMENT(
  	 TM_FILE_ID NUMBER(10,0)  NOT NULL,
  JOB_ID NUMBER(10,0)  NOT NULL,
  FILE_NAME VARCHAR2(255)  ,
  FILE_DATA BLOB  ,
  CONTENT_TYPE VARCHAR2(50)  ,
  CONTENT_LENGTH NUMBER(10,0)  ,
  OPTIONSET_ID NUMBER(10,0)
  )';

END IF;
END;

END;
END IF;
END;




